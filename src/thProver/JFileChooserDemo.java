/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFileChooser.java
 *
 * Created on 9-giu-2011, 20.06.55
 */
package thProver;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import thProver.parser.CNFParser;
import thProver.parserTptp.CNFParserTptp;

/**
 *
 * @author Alessandro Gottoli vr352595
 */
public class JFileChooserDemo extends javax.swing.JFrame {

    private final String GRAFO_TEXT_INIT = "Parsing...";
    private final String CC_TEXT_INIT = "Given Clause Cicle...";
    private final String SAT_TEXT_INIT = " La formula risulta";
    private final String START_BUTTON_INIT = "Parse";
    private final String START_BUTTON_SAT = "Prove";
    //private final int AUMENTO_DIM = 62;
    private Thread myT; //, avan;
    //private Boolean stop;
    private String formula;
    private File file;
    //private boolean useFile = false; // c'è già interactive...
    private Reader formulaReader;
    private boolean answerLiteral = false;
    private boolean interactive = true;
    private boolean sos = false;
    private boolean kbo = false;
    private boolean multiset = false;
    private boolean useOrdering = false;
    private boolean useStandard = false;
    private boolean aLaE = false;
    private boolean tptp = false;
    private int limit = -1;//Integer.MAX_VALUE;
    private boolean gui = false;
    private boolean faseParsing = true;
    private CNFFormula f = null;

    /**
     * Creates new form JFileChooser
     */
    public JFileChooserDemo() {
        initComponents();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Formula", "txt", "cnf", "formula", "p");
        fc.setFileFilter(filter);
        setLocationRelativeTo(null); // mette al centro 
        //PropertyChangeSupport pcs = new PropertyChangeSupport(stop);
/*		fc = new JFileChooserDemo();
         FileNameExtensionFilter filter = new FileNameExtensionFilter("Formule", "txt", "cnf", "formula");
         fc.setFileFilter(filter);
         */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc = new JFileChooser(System.getProperty("user.dir"));
        inserText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        startButton = new javax.swing.JButton();
        grafoText = new javax.swing.JLabel();
        ccText = new javax.swing.JLabel();
        satText = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        modeMenu = new javax.swing.JMenu();
        aLaOtterButton = new javax.swing.JRadioButtonMenuItem();
        aLaEButton = new javax.swing.JRadioButtonMenuItem();
        orderingTypeMenu = new javax.swing.JMenu();
        noOrderingButton = new javax.swing.JRadioButtonMenuItem();
        lexicographicButton = new javax.swing.JRadioButtonMenuItem();
        multisetButton = new javax.swing.JRadioButtonMenuItem();
        knuthBendixButton = new javax.swing.JRadioButtonMenuItem();
        precedencesAndWeightsTypeMenu = new javax.swing.JMenu();
        useUserDefinedOrderingButton = new javax.swing.JRadioButtonMenuItem();
        useStandardOrderingButton = new javax.swing.JRadioButtonMenuItem();
        otherOptionsMenu = new javax.swing.JMenu();
        sosButton = new javax.swing.JCheckBoxMenuItem();
        answerLiteralButton = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Given Clause Cicle");
        setPreferredSize(new java.awt.Dimension(465, 400));
        setResizable(false);

        inserText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        inserText.setText("Inserire la formula:");

        log.setColumns(20);
        log.setLineWrap(true);
        log.setRows(5);
        log.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                logComponentAdded(evt);
            }
        });
        log.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                logPropertyChange(evt);
            }
        });
        log.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                logKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                logKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(log);

        startButton.setEnabled(false);
        startButton.setText(START_BUTTON_INIT);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        grafoText.setVisible(false);
        grafoText.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        grafoText.setText(GRAFO_TEXT_INIT);

        ccText.setVisible(false);
        ccText.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ccText.setText(CC_TEXT_INIT);

        satText.setVisible(false);
        satText.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        satText.setText(SAT_TEXT_INIT);

        jProgressBar1.setVisible(false);
        jProgressBar1.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jProgressBar1.setEnabled(false);
        jProgressBar1.setFocusable(false);
        jProgressBar1.setIndeterminate(true);

        fileMenu.setText("File");
        fileMenu.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                fileMenuAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        openItem.setText("Open");
        openItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openItemActionPerformed(evt);
            }
        });
        fileMenu.add(openItem);

        saveItem.setEnabled(false);
        saveItem.setText("Save");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        jMenuBar1.add(fileMenu);

        modeMenu.setText("Mode");
        modeMenu.setEnabled(false);
        modeMenu.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                modeMenuAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        aLaOtterButton.setSelected(true);
        aLaOtterButton.setText("à la Otter");
        aLaOtterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setALaOtterButtonActionPerformed(evt);
            }
        });
        modeMenu.add(aLaOtterButton);

        aLaEButton.setText("à la E");
        aLaEButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setALaEActionPerformed(evt);
            }
        });
        modeMenu.add(aLaEButton);

        jMenuBar1.add(modeMenu);

        orderingTypeMenu.setText("Ordering Type");
        orderingTypeMenu.setEnabled(false);
        orderingTypeMenu.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                orderingAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        noOrderingButton.setSelected(true);
        noOrderingButton.setText("no ordering");
        noOrderingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setNoOrdering(evt);
            }
        });
        orderingTypeMenu.add(noOrderingButton);

        lexicographicButton.setText("lexicographic");
        lexicographicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLexicographicOrdering(evt);
            }
        });
        orderingTypeMenu.add(lexicographicButton);

        multisetButton.setText("multiset");
        multisetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMultiSetOrdering(evt);
            }
        });
        orderingTypeMenu.add(multisetButton);

        knuthBendixButton.setText("Knuth-Bendix");
        knuthBendixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setKnuthBendixOrdering(evt);
            }
        });
        orderingTypeMenu.add(knuthBendixButton);

        jMenuBar1.add(orderingTypeMenu);

        precedencesAndWeightsTypeMenu.setText("Precedences and Weights");
        precedencesAndWeightsTypeMenu.setEnabled(false);
        precedencesAndWeightsTypeMenu.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                precedencesAndWeightsTypeMenuAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        useUserDefinedOrderingButton.setSelected(true);
        useUserDefinedOrderingButton.setText("user defined precedences and weights");
        useUserDefinedOrderingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setUseUserDefinedOrdering(evt);
            }
        });
        precedencesAndWeightsTypeMenu.add(useUserDefinedOrderingButton);

        useStandardOrderingButton.setText("standard precendence and weight");
        useStandardOrderingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setStandardOrdering(evt);
            }
        });
        precedencesAndWeightsTypeMenu.add(useStandardOrderingButton);

        jMenuBar1.add(precedencesAndWeightsTypeMenu);

        otherOptionsMenu.setText("Options");
        otherOptionsMenu.setEnabled(false);
        otherOptionsMenu.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                otherOptionsMenuAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        sosButton.setText("use set of support strategy");
        sosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sosActionPerformer(evt);
            }
        });
        otherOptionsMenu.add(sosButton);

        answerLiteralButton.setText("use answer literal");
        answerLiteralButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerLiteralButtonActionPerformed(evt);
            }
        });
        otherOptionsMenu.add(answerLiteralButton);

        jMenuBar1.add(otherOptionsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(304, 304, 304)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inserText, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(grafoText)
                                    .addComponent(ccText)
                                    .addComponent(satText))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inserText, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startButton)
                .addGap(13, 13, 13)
                .addComponent(grafoText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ccText, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(satText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void fileMenuAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_fileMenuAncestorAdded
            // do nothing
	}//GEN-LAST:event_fileMenuAncestorAdded

	private void logComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_logComponentAdded
            // do nothing
	}//GEN-LAST:event_logComponentAdded

	private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
            if (startButton.getText().equals(START_BUTTON_INIT)
                    || startButton.getText().equals(START_BUTTON_SAT)) {
                
                //if (grafoText.isVisible())
                //    resetInterface();
                //else
                // Ingrandisco la Finestra
                //setSize(getWidth(), getHeight() + AUMENTO_DIM);

                log.setEditable(false);
                fileMenu.setEnabled(false);
                modeMenu.setEnabled(false);
                orderingTypeMenu.setEnabled(false);
                precedencesAndWeightsTypeMenu.setEnabled(false);
                otherOptionsMenu.setEnabled(false);
                grafoText.setVisible(true);
                startButton.setText("Abort");
                jProgressBar1.setVisible(true);
                //            jProgressBar1.setIndeterminate(true);
                //jProgressBar1.setMaximum(log.getText().length());
                //jProgressBar1.setMinimum(0);


                myT = new Thread(new MyThread());
                myT.start();
            } else {
                myT.stop();
                myT = null;

                //avan.interrupt();
                //stop = true;

                fileMenu.setEnabled(true);
                modeMenu.setEnabled(true);
                orderingTypeMenu.setEnabled(false);
                precedencesAndWeightsTypeMenu.setEnabled(false);
                otherOptionsMenu.setEnabled(true);
                log.setEditable(true);
                //startButton.setText(START_BUTTON_INIT);
                String canc = " CANCELLATO DALL'UTENTE";

                //jProgressBar1.setIndeterminate(false);
                //jProgressBar1.setEnabled(false);
                //             jProgressBar1.setVisible(false);
                if (ccText.isVisible()) {
                    ccText.setText(ccText.getText() + canc);
                    jProgressBar1.setVisible(false);
                    jProgressBar1.setEnabled(false);
                    startButton.setText(START_BUTTON_SAT);
                } else {
                    grafoText.setText(grafoText.getText() + canc);
                    startButton.setText(START_BUTTON_INIT);
                }
            }

	}//GEN-LAST:event_startButtonActionPerformed

	private void openItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openItemActionPerformed
            int returnVal = fc.showOpenDialog(JFileChooserDemo.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {

                //try {
                    file = fc.getSelectedFile();
                    //in = new BufferedReader(new FileReader(file));
                    //formula = formulaReader.toString();
                    //formula = in.readLine();
                    //if (formula.length() < 50000)
                    //    log.setText(formula);
                    //else
                    log.setText("Formula caricata da file: " + file);
                    //log.setEditable(false);
                    interactive = false;

                //} catch (IOException ex) {
                //}

                if (log.getText().length() > 0) {
                    startButton.setEnabled(true);
                    saveItem.setEnabled(true);
                }
                if (grafoText.isVisible()) {
                    resetInterface();
                    //setSize(getWidth(), getHeight() - AUMENTO_DIM);
                }

            }


	}//GEN-LAST:event_openItemActionPerformed

	private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
            int returnVal = fc.showSaveDialog(JFileChooserDemo.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                BufferedWriter out = null;
                //try {
                File file = fc.getSelectedFile();
                Boolean savefile = true;
                if (file.exists()) {
                    //System.out.println("Il file " + file + " esiste già.");

                    // if file exists create a JOptionPane confirm dialog
                    // if user chooses YES then set savefile flag to true,
                    // otherwise leave it as false

                    Object[] options = {"YES", "NO"};

                    JOptionPane pane = new JOptionPane(file.toString()
                            + " already exists.\n"
                            + "Do you want to replace it?",
                            JOptionPane.WARNING_MESSAGE,
                            JOptionPane.DEFAULT_OPTION,
                            null,
                            options,
                            options[1]);

                    JDialog dialog = pane.createDialog(null, "Warning");

                    dialog.setVisible(true);
                    try {
                        Object selectedValue = pane.getValue();
                        if (!selectedValue.toString().equals("YES"))
                            savefile = false;
                    } catch (NullPointerException e) { // se chiudo la finestra dell'alert
                        savefile = false;
                    }
                }

                if (savefile)
                    try {
                        out = new BufferedWriter(new FileWriter(file));
                        out.write(log.getText());
                    } catch (IOException e) {
                    } finally {
                        try {
                            out.close();
                        } catch (IOException ex) {
                        }
                    }
            }

	}//GEN-LAST:event_saveItemActionPerformed

	private void logKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_logKeyPressed
            if (evt != null && log.isEditable()) {
                if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    evt.setKeyCode(java.awt.event.KeyEvent.CHAR_UNDEFINED);

                    // NOTA: si può far premere il pulsante SAT
                    if (startButton.isEnabled())
                        startButton.doClick();
                } else {
                    if (log.getText().startsWith("Formula caricata da file:"))
                        log.setText("");
                    formula = log.getText();
                    if (grafoText.isVisible()) {
                        resetInterface();
                        //setSize(getWidth(), getHeight() - AUMENTO_DIM);
                    }
                }
                interactive = true;
                if (modeMenu.isEnabled()) {
                    modeMenu.setEnabled(false);
                    orderingTypeMenu.setEnabled(false);
                    precedencesAndWeightsTypeMenu.setEnabled(false);
                    otherOptionsMenu.setEnabled(false);
                }
            }
	}//GEN-LAST:event_logKeyPressed

	private void logKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_logKeyReleased
            if (evt != null && log.isEditable()) {
                if (log.getText().length() == 0) {
                    startButton.setEnabled(false);
                    saveItem.setEnabled(false);
                } else {
                    startButton.setEnabled(true);
                    saveItem.setEnabled(true);
                }
                formula = log.getText();
            }
	}//GEN-LAST:event_logKeyReleased

	private void logPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_logPropertyChange
            if (log.getText().length() == 0) {
                startButton.setEnabled(false);
                saveItem.setEnabled(false);
            } else {
                startButton.setEnabled(true);
                saveItem.setEnabled(true);
            }
	}//GEN-LAST:event_logPropertyChange

        private void modeMenuAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_modeMenuAncestorAdded
            // do nothing
        }//GEN-LAST:event_modeMenuAncestorAdded

        private void setALaOtterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setALaOtterButtonActionPerformed
            // quando lo schiaccio che non ha il pallino
            // lo seleziono, infatti dopo avrà il pallino
            // e isSelected dice true
            if (aLaOtterButton.isSelected()) {
                aLaE = false;
                aLaEButton.setSelected(false);
            } else
                aLaOtterButton.setSelected(true);
            
            if (ccText.isVisible()) {
                ccText.setVisible(false);
                ccText.setText(CC_TEXT_INIT);
                satText.setVisible(false);
                satText.setText(SAT_TEXT_INIT);
            }
        }//GEN-LAST:event_setALaOtterButtonActionPerformed

        private void setALaEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setALaEActionPerformed
            if (aLaEButton.isSelected()) {
                aLaOtterButton.setSelected(false);
                aLaE = true;
            } else
                aLaEButton.setSelected(true);
            
            if (ccText.isVisible()) {
                ccText.setVisible(false);
                ccText.setText(CC_TEXT_INIT);
                satText.setVisible(false);
                satText.setText(SAT_TEXT_INIT);
            }
        }//GEN-LAST:event_setALaEActionPerformed

    private void setLexicographicOrdering(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLexicographicOrdering
        if (lexicographicButton.isSelected()) {
            noOrderingButton.setSelected(false);
            multisetButton.setSelected(false);
            knuthBendixButton.setSelected(false);
            useOrdering = true;
            multiset = false;
            kbo = false;
            precedencesAndWeightsTypeMenu.setEnabled(true);
        } else
            lexicographicButton.setSelected(true);
        
        if (ccText.isVisible()) {
                ccText.setVisible(false);
                ccText.setText(CC_TEXT_INIT);
                satText.setVisible(false);
                satText.setText(SAT_TEXT_INIT);
            }
    }//GEN-LAST:event_setLexicographicOrdering

    private void setMultiSetOrdering(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMultiSetOrdering
        if (multisetButton.isSelected()) {
            noOrderingButton.setSelected(false);
            lexicographicButton.setSelected(false);
            knuthBendixButton.setSelected(false);
            useOrdering = true;
            multiset = true;
            kbo = false;
            precedencesAndWeightsTypeMenu.setEnabled(true);
        } else
            multisetButton.setSelected(true);
        
        if (ccText.isVisible()) {
                ccText.setVisible(false);
                ccText.setText(CC_TEXT_INIT);
                satText.setVisible(false);
                satText.setText(SAT_TEXT_INIT);
            }
    }//GEN-LAST:event_setMultiSetOrdering

    private void orderingAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_orderingAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_orderingAncestorAdded

    private void setKnuthBendixOrdering(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setKnuthBendixOrdering
        if (knuthBendixButton.isSelected()) {
            noOrderingButton.setSelected(false);
            multisetButton.setSelected(false);
            lexicographicButton.setSelected(false);
            useOrdering = true;
            multiset = false;
            kbo = true;
            precedencesAndWeightsTypeMenu.setEnabled(true);
        } else
            knuthBendixButton.setSelected(true);
        
        if (ccText.isVisible()) {
                ccText.setVisible(false);
                ccText.setText(CC_TEXT_INIT);
                satText.setVisible(false);
                satText.setText(SAT_TEXT_INIT);
            }
    }//GEN-LAST:event_setKnuthBendixOrdering

    private void setNoOrdering(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setNoOrdering
        if (noOrderingButton.isSelected()) {
            multisetButton.setSelected(false);
            lexicographicButton.setSelected(false);
            knuthBendixButton.setSelected(false);
            useOrdering = false;
            multiset = false;
            kbo = false;
            precedencesAndWeightsTypeMenu.setEnabled(false);
        } else
            noOrderingButton.setSelected(true);
        
        if (ccText.isVisible()) {
                ccText.setVisible(false);
                ccText.setText(CC_TEXT_INIT);
                satText.setVisible(false);
                satText.setText(SAT_TEXT_INIT);
            }
    }//GEN-LAST:event_setNoOrdering

    private void precedencesAndWeightsTypeMenuAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_precedencesAndWeightsTypeMenuAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_precedencesAndWeightsTypeMenuAncestorAdded

    private void setStandardOrdering(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setStandardOrdering
        if (useStandardOrderingButton.isSelected()) {
            useUserDefinedOrderingButton.setSelected(false);
        } else {
            useStandardOrderingButton.setSelected(true);
            useStandard = true;
        }
        
        if (ccText.isVisible()) {
                ccText.setVisible(false);
                ccText.setText(CC_TEXT_INIT);
                satText.setVisible(false);
                satText.setText(SAT_TEXT_INIT);
            }
    }//GEN-LAST:event_setStandardOrdering

    private void setUseUserDefinedOrdering(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setUseUserDefinedOrdering
        if (useUserDefinedOrderingButton.isSelected()) {
            useStandardOrderingButton.setSelected(false);
        } else {
            useUserDefinedOrderingButton.setSelected(true);
            useStandard = false;
        }
        
        if (ccText.isVisible()) {
                ccText.setVisible(false);
                ccText.setText(CC_TEXT_INIT);
                satText.setVisible(false);
                satText.setText(SAT_TEXT_INIT);
            }
    }//GEN-LAST:event_setUseUserDefinedOrdering

    private void otherOptionsMenuAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_otherOptionsMenuAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_otherOptionsMenuAncestorAdded

    private void sosActionPerformer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sosActionPerformer
        sos = sosButton.isSelected();
        
        if (ccText.isVisible()) {
                ccText.setVisible(false);
                ccText.setText(CC_TEXT_INIT);
                satText.setVisible(false);
                satText.setText(SAT_TEXT_INIT);
            }
    }//GEN-LAST:event_sosActionPerformer

    private void answerLiteralButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerLiteralButtonActionPerformed
        answerLiteral = answerLiteralButton.isSelected();
        
        if (ccText.isVisible()) {
                ccText.setVisible(false);
                ccText.setText(CC_TEXT_INIT);
                satText.setVisible(false);
                satText.setText(SAT_TEXT_INIT);
            }
    }//GEN-LAST:event_answerLiteralButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem aLaEButton;
    private javax.swing.JRadioButtonMenuItem aLaOtterButton;
    private javax.swing.JCheckBoxMenuItem answerLiteralButton;
    private javax.swing.JLabel ccText;
    private javax.swing.JFileChooser fc;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel grafoText;
    private javax.swing.JLabel inserText;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButtonMenuItem knuthBendixButton;
    private javax.swing.JRadioButtonMenuItem lexicographicButton;
    private javax.swing.JTextArea log;
    private javax.swing.JMenu modeMenu;
    private javax.swing.JRadioButtonMenuItem multisetButton;
    private javax.swing.JRadioButtonMenuItem noOrderingButton;
    private javax.swing.JMenuItem openItem;
    private javax.swing.JMenu orderingTypeMenu;
    private javax.swing.JMenu otherOptionsMenu;
    private javax.swing.JMenu precedencesAndWeightsTypeMenu;
    private javax.swing.JLabel satText;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JCheckBoxMenuItem sosButton;
    private javax.swing.JButton startButton;
    private javax.swing.JRadioButtonMenuItem useStandardOrderingButton;
    private javax.swing.JRadioButtonMenuItem useUserDefinedOrderingButton;
    // End of variables declaration//GEN-END:variables

    public void resetInterface() {
        grafoText.setVisible(false);
        ccText.setVisible(false);
        satText.setVisible(false);
        jProgressBar1.setVisible(false);

        grafoText.setText(GRAFO_TEXT_INIT);
        ccText.setText(CC_TEXT_INIT);
        satText.setText(SAT_TEXT_INIT);

        startButton.setText(START_BUTTON_INIT);
        faseParsing = true;
        //interactive = true;
        //startButton.setEnabled(false);

        saveItem.setEnabled(false);
        
        modeMenu.setEnabled(false);
        orderingTypeMenu.setEnabled(false);
        precedencesAndWeightsTypeMenu.setEnabled(false);
        otherOptionsMenu.setEnabled(false);        
        
        jProgressBar1.setEnabled(false);
        //jProgressBar1.setIndeterminate(false);
        jProgressBar1.setValue(0);
    }

    /**
     * L'oggetto Runnable MyThread gestisce la reale computazione
     */
    private class MyThread implements Runnable, PropertyChangeListener {

        
        //public Boolean killati = false;
        /**
         * Computazione avviata
         */
        @Override
        public void run() {


            PropertyChangeSupport pcs = new PropertyChangeSupport(this);
            pcs.addPropertyChangeListener(this);

            if (faseParsing) {
                
                //stop = false;
                //avan = new Thread(new Avanzamento());
                //avan.start();

                long inizio = System.nanoTime(); //currentTimeMillis();

                //try {

                //Object[] clausole = null; //= Parser.analisiAndCostrGrafo(formula, orderedResolution.isSelected());
                tptp = false;
                /* PARSING inizio */
                if (!tptp) {
                    try {
                        if (!interactive) {
                            try {
                                formulaReader = new FileReader(file);
                            } catch (FileNotFoundException ex) {
                            }
                        } else {
                            formulaReader = new StringReader(formula);
                        }
                        CNFParser parser = new CNFParser(formulaReader);
                        parser.Start();
                        f = parser.getCNFFormula();
                    } catch (thProver.parser.ParseException pe) {
                        //System.out.println(pe);
                        tptp = true;
                    } catch (thProver.parser.TokenMgrError tme) {
                        //System.out.println(pe);
                        tptp = true;
                    }
                }
                if (tptp) {
                    try {
                        if (!interactive) {
                            try {
                                formulaReader = new FileReader(file);
                            } catch (FileNotFoundException ex) {
                            }
                        } else {
                            formulaReader = new StringReader(formula);
                        }
                        CNFParserTptp parser = new CNFParserTptp(formulaReader);
                        parser.Start();
                        f = parser.getCNFFormula();
                    } catch (thProver.parserTptp.ParseException petptp) {
                        //System.out.println(petptp); //"Errore di parsing.");
                        System.out.println("Errore di parsing.");
                    }
                }
                
                jProgressBar1.setVisible(false);
                jProgressBar1.setStringPainted(false);
                /* PARSING fine */
                if (f == null) {
                    grafoText.setText(grafoText.getText() + " INTERROTTO (errore di parsing)");
                    startButton.setText(START_BUTTON_INIT);
                    fileMenu.setEnabled(true);

                    //return;
                } else {


                    long fine = System.nanoTime(); //currentTimeMillis();
                    //stop = true;

                    /*HashOpenInterface ho = (HashOpenInterface) clausole[2];
                     System.out.println("numero di nodi creati: " + ho.size());
                     try {
                     System.in.read();
                     } catch (Exception ignore){}
                     */

                    //            jProgressBar1.setIndeterminate(false);

                    //if (clausole == null) {
                    //    System.out.println("Costruzione del grafo interrotta.");
                    //    grafoText.setText(grafoText.getText() + " INTERROTTA (errore nella stringa)");
                    //} else {

                    //jProgressBar1.setVisible(false);
                    //jProgressBar1.setStringPainted(false);
                    //System.out.println("Costruzione del grafo completata.");
                    long time = (fine - inizio);// / 1000;

                    // statistiche di parsing
                    System.out.println(f.getNumClausesAndSOS() + " clauses.");

                    grafoText.setText(grafoText.getText() + " COMPLETATO (" 
                            + formatoTime(time) + ") trovate " 
                            + f.getNumClausesAndSOS() + " clauses.");

                    //System.out.println("uguaglianze: " + clausole[0].toString());

                    //Coda[] ugDis = {(Coda) clausole[0], (Coda) clausole[1]};

                    ///////////////////////////////////////////////////////////////////////////////////

                    //ccText.setVisible(true);
                    //jProgressBar1.setVisible(true);
                    //jProgressBar1.setIndeterminate(true);
                    //inizio = System.currentTimeMillis();

                    //Boolean soddisfacibile = false;
                    /*if (orderedResolution.isSelected())
                     soddisfacibile = OrdListCongruenceClosure.soddisfacibilita(clausole);
                     else
                     soddisfacibile = HLCongruenceClosure.soddisfacibilita(clausole);
                     */
                    //fine = System.currentTimeMillis();

                    startButton.setText(START_BUTTON_SAT);
                    faseParsing = false;
                    //fileMenu.setEnabled(true);
                    //modeMenu.setEnabled(true);
                    //orderingTypeMenu.setEnabled(true);
                    //precedencesAndWeightsTypeMenu.setEnabled(true);
                    
                }
                
            } else {
                
                ccText.setVisible(true);
                jProgressBar1.setVisible(true);
                jProgressBar1.setEnabled(true);

                /* SATISFIABILITY inizio */
                /* ORDERING */
                Ordering or = new Ordering();
                /* precedences */
                boolean useStandard = false;
                if (f.getPrecedences().isEmpty() && tptp) {
                    // con tptp non c'è specificato un ordinamento allora
                    // ne scelgo uno io standard
                    or.setUseOrdStandard(true);
                    useStandard = true;
                }
                or.setPrecedence(f.getPrecedences(), f.getNPrec());
                /* set KBO */
                or.setWeightsKBO(f.getWeights(), f.getWeightVars());



                String grafo = null;
                GivenClauseProver prover = new GivenClauseProver(aLaE, sos, kbo,
                        multiset, useOrdering, or, limit);

                System.out.println("Starting satisfiability proving...");
                StringBuilder strb = new StringBuilder();
                if (aLaE)
                    strb.append("à la E");
                else
                    strb.append("à la Otter");
                if (useOrdering) {
                    strb.append(" with");
                    if (useStandard)
                        strb.append(" 'standard'");
                    else
                        strb.append(" 'user specified'");
                    if (kbo) {
                        strb.append(" kbo");
                    } else if (multiset) {
                        strb.append(" multiset");
                    } else {
                        strb.append(" lexicographic");
                    }
                    strb.append(" ordering");
                } else {
                    strb.append(" with no ordering");
                }
                if (sos) {
                    strb.append(" and set of support strategy");
                }

                System.out.println(strb.toString());

                Clause result = prover.satisfiable(f);

                long time = prover.getElapsedTime();

                /*
                 StringBuilder sb = new StringBuilder();

                 if (result == null) {
                 sb.append("E` SODDISFACIBILE.\n");
                 System.out.print(sb.toString());
                 } else {
                 sb.append("E` INSODDISFACIBILE, stampare la prova? [y,n]: ");
                 grafo = result.getDOT();
                 //sb.append(grafo);
                 System.out.print(sb.toString());

          
           
                 Scanner stdin = new Scanner(System.in);
                 String stamp = stdin.nextLine();
                 if (stamp.equalsIgnoreCase("yes") || stamp.equalsIgnoreCase("y"))
                 System.out.println(grafo);
            
                 System.out.print("\nUsare 'dot' per esportare un immagine del grafo della prova? [y,n]: ");
                 stamp = stdin.nextLine();
                 if (stamp.equalsIgnoreCase("yes") || stamp.equalsIgnoreCase("y")) {
                 exportDot(fileName, grafo);
                 }
                 stdin.close();
            
                 }
                 */
                /* SATISFIABILITY fine */





                //System.out.println("Algoritmo di Chiusura di Congruenza completato.");
                //time = (fine - inizio);// / 1000;
                ccText.setText(ccText.getText() + " COMPLETATA (" + formatoTime(time) + ")");

                satText.setVisible(true);

                if (result == null) { //if (soddisfacibile) {
                    System.out.println("E` SODDISFACIBILE.");
                    satText.setText(satText.getText() + " SODDISFACIBILE");
                } else {
                    System.out.println("E` INSODDISFACIBILE.");
                    satText.setText(satText.getText() + " INSODDISFACIBILE");
                }

                jProgressBar1.setVisible(false);
                //jProgressBar1.setIndeterminate(false);
                startButton.setText(START_BUTTON_SAT);
                //faseParsing = false;
            }
            //} catch (IllegalStateException e) {
            //    long fine = System.currentTimeMillis();
            //    stop = true;
            //    long time = (fine - inizio);// / 1000;
            //    System.out.println("Costruzione del grafo fermata perché trovata insoddisfacibilità atom = !atom.");
            //    grafoText.setText(grafoText.getText() + " FERMATA (" + formatoTime(time) + ")");
            //    ccText.setText(" perché è stata trovata atom = !atom durante la costruzione del grafo");
            //    ccText.setVisible(true);
            //    satText.setText(satText.getText() + " NON SODDISFACIBILE");
            //    satText.setVisible(true);

            //}

            fileMenu.setEnabled(true);
            modeMenu.setEnabled(true);
            orderingTypeMenu.setEnabled(true);
            if (useOrdering)
                precedencesAndWeightsTypeMenu.setEnabled(true);
            otherOptionsMenu.setEnabled(true);
            log.setEditable(true);
            jProgressBar1.setEnabled(false);


        }

        private String formatoTime(long time) {
            time = time / 1000000;
            if (time < 1000)
                return time + " millisec.";
            else if (time > 60000) {
                long minuti = time / 60000;
                int secondi = (int) ((time / 1000) % 60);
                return minuti + " min. e " + secondi + " sec.";
            } else {
                int secondi = (int) (time / 1000);
                int milli = (int) (time % 1000);
                return secondi + " sec. e " + milli + " millisec.";
            }
        }

        @Override
        public void propertyChange(PropertyChangeEvent pce) {
            String property = pce.getPropertyName();
            //if ("background".equals(property))
            //System.err.println("STOP CAMBIATO??? " + property);
            return;
        }
    }
/*
    private class Avanzamento implements Runnable {

        /* *
         * Computazione avviata
         * /
        @Override
        public void run() {
            int progress = 0;
            int newProgress = 0;
            int timeSleep = 700;
            //Initialize progress property.
            jProgressBar1.setValue(0);
            //jProgressBar1.setF
            jProgressBar1.setStringPainted(true);
            while (progress < 100 && !stop) {
                //Sleep for up to one second.
                try {
                    Thread.sleep(timeSleep);

                    //DEBUG
                    //System.out.println("AVANZAMENTO ANCORA IN ESECUZIONE");

                } catch (InterruptedException ignore) {
                    //System.err.println("INTERRUPTED");
                    break;
                }
                / *
                 if ((newProgress = Parser.avanzamento * 100 / formula.length()) == progress)
                 timeSleep += 300;
                 else {
                 progress = newProgress;
                 jProgressBar1.setValue(Math.min(progress, 100));
                 timeSleep = Math.max(700, timeSleep - 300);
                 }
                 * /
            }
        }
    }
    */
}
