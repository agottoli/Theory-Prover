PARSER_BEGIN(CNFParserTptp)
package thProver.parserTptp;

import thProver.CNFFormula;
import thProver.Clause;
import thProver.Literal;
import thProver.Term;
import thProver.Atom;
import thProver.Constant;
import thProver.Variable;
import thProver.Function;

import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;

public class CNFParserTptp {

    private static CNFFormula f = new CNFFormula();

    public CNFFormula getCNFFormula() {
        CNFFormula currentFormula = f;
        f = new CNFFormula();
        return currentFormula;
    }

}
PARSER_END(CNFParserTptp)

SKIP:  
{ <" "> 
| <"\t"> 
| <"\n"> 
| <"\r"> 
| <"#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")?>  // used to skip comment, see http://www.cs.utsa.edu/~danlo/teaching/cs4713/lecture/node16.html for more details
                                                 // and this discussion for <EOF> problem http://www.java-forums.org/advanced-java/44981-single-line-comments-javacc.html
}
 
        

<*>TOKEN: {<VLINE: "|">
        |   <NOT: "~">
| <COMMA: ",">
| <LPAR: "(">
| <RPAR: ")">
| <DOT: ".">

//| <LOWER_NAME: ((<LOWER_WORD>)+ ( <UNDERSCORE> (<LOWER_WORD>)+ )* ) >
//| <UPPER_NAME: ((<UPPER_WORD>)+ ( <UNDERSCORE> (<UPPER_WORD>)+ )* ) >

        |   <LOWER_WORD:        ( <LOWER_ALFA> | <DOLLAR_LOWER_ALFA> ) (<ALFA_NUMERIC>)* >
        |   <UPPER_WORD:        ( <UPPER_ALFA> | <DOLLAR_UPPER_ALFA> ) (<ALFA_NUMERIC>)* >

        |   <SINGLE_QUOTED:     <SINGLE_QUOTE> (<SQ_CHAR>)+ <SINGLE_QUOTE> >    

        |   <#LOWER_ALFA:       ["a"-"z"]>
        |   <#UPPER_ALFA:       ["A"-"Z"]>
        |   <#DOLLAR_LOWER_ALFA: <DEF_SYS><LOWER_ALFA> >
        |   <#DOLLAR_UPPER_ALFA: <DEF_SYS><UPPER_ALFA> >
        |   <#ALFA_NUMERIC:     <LOWER_ALFA> | <UPPER_ALFA> | <NUMERIC> | <UNDERSCORE> >
        |   <#DEF_SYS:          "$" | "$$">     // Note: $ and $$ sono da scartare
        |   <#UNDERSCORE:       "_">
        |   <#SINGLE_QUOTE:     "'">
        |   <#SQ_CHAR:          ["\40"-"\46"] |  ["\50"-"\133"] | ["\135"-"\176"]>

        |   <INTEGER:           <SIGNED_INTEGER> | <DECIMAL> >
        |   <SIGNED_INTEGER:    <SIGN><DECIMAL> >
        |   <DECIMAL:           <ZERO_NUMERIC> | <NON_ZERO_NUMERIC>(<NUMERIC>)*  >    

        |   <#SIGN:             "+" | "-">
        |   <#NUMERIC:          ["0"-"9"]>           
        |   <#ZERO_NUMERIC:     ["0"]>
        |   <#NON_ZERO_NUMERIC: ["1"-"9"]>
}

/*
* Productions
*/
void Start():
{}
{
        ( Clause() )*
	<EOF>
}

// a clause
void Clause():
{
    Clause c = new Clause();
    Literal l;
    Token cnf;
    Token role;
}
{
    cnf = <LOWER_WORD> { if (!cnf.image.equals("cnf")) 
                            throw new ParseException("una clausola deve cominciare con cnf."); }
    <LPAR> ( <LOWER_WORD> | <SINGLE_QUOTED> | <INTEGER> ) <COMMA> 
           role = <LOWER_WORD> <COMMA>
           (
           ( <LPAR>   l = Literal() { c.addLiteral(l); }
                    ( <VLINE> l = Literal() { c.addLiteral(l); } )* <RPAR> )
           | ( l = Literal() { c.addLiteral(l); }
                    ( <VLINE> l = Literal() { c.addLiteral(l); } )* )
           )
    <RPAR> <DOT>
	

        { if (role.image.equals("negated_conjecture")) {
             f.addClause(c); // f.addSOS(c);
          } else {
             f.addClause(c);
          }
        }
}

// a literal
Literal Literal():
{
    boolean pos = true;
    Atom a;
}
{
	[ <NOT> { pos = false; } ]
        a = Atom()

        { return f.addLiteral(new Literal(pos, a)); }
}

Atom Atom():
{
    Atom a;
    List<Term> terms = null;
    Token p;
}
{
    ( p = <LOWER_WORD> | p = <SINGLE_QUOTED> )
        [ <LPAR> terms = Terms() <RPAR> ]

        { boolean ok;
          if (terms != null) {
             a = new Atom(p.image, terms);
             ok = f.checkArity(p.image, terms.size());
          } else {
             a = new Atom(p.image);
             ok = f.checkArity(p.image, 0);
          }
          if (!ok)
             throw new IllegalArgumentException("Errore di arietà: " + p.image + "\n");

          return f.addAtom(a); }
}

List<Term> Terms():
{
    List<Term> tl = new LinkedList<Term>();
    Term t;
}
{
	t = Term()  { tl.add(t); } ( <COMMA> t = Term() { tl.add(t); } )*

        { return tl; }
}

Term Term():
{
    boolean noArgs = true;
    boolean variabile = false;
    Token s;
    Term t;
    List<Term> terms = null;

}
{

            (
              ( ( s = <LOWER_WORD> | s = <SINGLE_QUOTED> )
                  [ { noArgs = false; } <LPAR> terms = Terms() <RPAR> ] ) 
               | ( s = <UPPER_WORD> { variabile = true; } )
            )


        {  if (noArgs) { // constant or variable
                if (variabile) {
                    t = f.addVariable(s.image);
                } else
                    t = f.addConstant(s.image); // per recuperare il puntatore alla costante
            } else { // function
                boolean ok = f.checkArity(s.image, terms.size());
                if (!ok) {
                    throw new IllegalArgumentException("Errore di arietà: " + s.image + "\n");
                }
                t = new Function(s.image, terms);
                //t.setSymbol(s.image);
                //((Function) t).setArgs(terms);
                t = f.addTerm(t);
           }
           return t;

            
        }

}
