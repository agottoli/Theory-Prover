digraph {
	nodesep="1.5"; ranksep=2;
	node [shape=plaintext];
	edge [color=gray];
	"~can(monkey(Location1_40,floor,nothing),ladder(Location2_40,floor),bananas(Location2'_40,ceiling))" -> "[]" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location1_40 <- l0, Location2_40 <- l1, Location2'_40 <- l2 }",labeldistance="6"];
	"~can(monkey(Location_38,floor,nothing),ladder(Location_38,floor),bananas(Location2_38,ceiling))" -> "~can(monkey(Location1_40,floor,nothing),ladder(Location2_40,floor),bananas(Location2'_40,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location_38 <- Location2_4, Ladder_4 <- ladder(Location2_4,floor), Bananas_4 <- bananas(Location2_38,ceiling) }",labeldistance="6"];
	"~can(monkey(Location1_33,floor,the_ladder),ladder(Location1_33,floor),bananas(Location2_33,ceiling))" -> "~can(monkey(Location_38,floor,nothing),ladder(Location_38,floor),bananas(Location2_38,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location1_33 <- Location_8, Height_8 <- floor, Bananas_8 <- bananas(Location2_33,ceiling) }",labeldistance="6"];
	"~can(monkey(Location_21,floor,the_ladder),ladder(Location_21,Any_height_21),bananas(Location_21,ceiling))" -> "~can(monkey(Location1_33,floor,the_ladder),ladder(Location1_33,floor),bananas(Location2_33,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location_21 <- Location2_2, Any_height_21 <- floor, Bananas_2 <- bananas(Location2_2,ceiling) }",labeldistance="6"];
	"~can(monkey(Location1_12,floor,nothing),ladder(Location1_12,floor),bananas(Location1_12,ceiling))" -> "~can(monkey(Location_21,floor,the_ladder),ladder(Location_21,Any_height_21),bananas(Location_21,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location1_12 <- Location_5, Height_5 <- floor, Bananas_5 <- bananas(Location_5,ceiling) }",labeldistance="6"];
	"~can(monkey(Location_11,Height_11,nothing),Ladder_11,bananas(Location_11,Height_11))" -> "~can(monkey(Location1_12,floor,nothing),ladder(Location1_12,floor),bananas(Location1_12,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location_11 <- Location1_0, Height_11 <- ceiling, Ladder_11 <- ladder(Location1_0,floor), Bananas_0 <- bananas(Location1_0,ceiling) }",labeldistance="6"];
	"~can(monkey(Somewhere_10,Some_height_10,the_bananas),Ladder_10,What_10)" -> "~can(monkey(Location_11,Height_11,nothing),Ladder_11,bananas(Location_11,Height_11))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Somewhere_10 <- Location_7, Some_height_10 <- Height_7, Ladder_10 <- Ladder_7, What_10 <- bananas(Location_7,Height_7) }",labeldistance="6"];
	"can(monkey(Location_7,Height_7,the_bananas),Ladder_7,bananas(Location_7,Height_7)) | ~can(monkey(Location_7,Height_7,nothing),Ladder_7,bananas(Location_7,Height_7))" -> "~can(monkey(Location_11,Height_11,nothing),Ladder_11,bananas(Location_11,Height_11))" ;
	"can(monkey(Location1_0,ceiling,nothing),ladder(Location1_0,floor),Bananas_0) | ~can(monkey(Location1_0,floor,nothing),ladder(Location1_0,floor),Bananas_0)" -> "~can(monkey(Location1_12,floor,nothing),ladder(Location1_12,floor),bananas(Location1_12,ceiling))" ;
	"can(monkey(Location_5,Height_5,nothing),ladder(Location_5,floor),Bananas_5) | ~can(monkey(Location_5,Height_5,the_ladder),ladder(Location_5,Any_height_5),Bananas_5)" -> "~can(monkey(Location_21,floor,the_ladder),ladder(Location_21,Any_height_21),bananas(Location_21,ceiling))" ;
	"can(monkey(Location2_2,floor,the_ladder),ladder(Location2_2,floor),Bananas_2) | ~can(monkey(Location1_2,floor,the_ladder),ladder(Location1_2,floor),Bananas_2)" -> "~can(monkey(Location1_33,floor,the_ladder),ladder(Location1_33,floor),bananas(Location2_33,ceiling))" ;
	"can(monkey(Location_8,Height_8,the_ladder),ladder(Location_8,Height_8),Bananas_8) | ~can(monkey(Location_8,Height_8,nothing),ladder(Location_8,Height_8),Bananas_8)" -> "~can(monkey(Location_38,floor,nothing),ladder(Location_38,floor),bananas(Location2_38,ceiling))" ;
	"can(monkey(Location2_4,floor,nothing),Ladder_4,Bananas_4) | ~can(monkey(Location1_4,floor,nothing),Ladder_4,Bananas_4)" -> "~can(monkey(Location1_40,floor,nothing),ladder(Location2_40,floor),bananas(Location2'_40,ceiling))" ;
	"can(monkey(l0,floor,nothing),ladder(l1,floor),bananas(l2,ceiling))" -> "[]" ;
}

