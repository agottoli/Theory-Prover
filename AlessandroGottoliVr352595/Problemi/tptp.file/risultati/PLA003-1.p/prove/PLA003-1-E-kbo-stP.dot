digraph {
	nodesep="1.5"; ranksep=2;
	node [shape=plaintext];
	edge [color=gray];
	"can(monkey(l1,floor,the_ladder),ladder(l1,floor),bananas(l2,ceiling))" -> "[]" [labelfontcolor=black,labelfontsize="12",headlabel="Ordered Resolution\n{ Location1_47 <- l1, Location2_47 <- l2 }",labeldistance="6"];
	"can(monkey(Location_8,Height_8,the_ladder),ladder(Location_8,Height_8),Bananas_8) | ~can(monkey(Location_8,Height_8,nothing),ladder(Location_8,Height_8),Bananas_8)" -> "can(monkey(l1,floor,the_ladder),ladder(l1,floor),bananas(l2,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Ordered Resolution\n{ Location_8 <- l1, Height_8 <- floor, Location2_11 <- l1, Bananas_8 <- bananas(l2,ceiling) }",labeldistance="6"];
	"can(monkey(Location2_11,floor,nothing),ladder(l1,floor),bananas(l2,ceiling))" -> "can(monkey(l1,floor,the_ladder),ladder(l1,floor),bananas(l2,ceiling))" ;
	"can(monkey(Location2_4,floor,nothing),Ladder_4,Bananas_4) | ~can(monkey(Location1_4,floor,nothing),Ladder_4,Bananas_4)" -> "can(monkey(Location2_11,floor,nothing),ladder(l1,floor),bananas(l2,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Ordered Resolution\n{ Location1_4 <- l0, Ladder_4 <- ladder(l1,floor), Bananas_4 <- bananas(l2,ceiling) }",labeldistance="6"];
	"can(monkey(l0,floor,nothing),ladder(l1,floor),bananas(l2,ceiling))" -> "can(monkey(Location2_11,floor,nothing),ladder(l1,floor),bananas(l2,ceiling))" ;
	"~can(monkey(Location1_47,floor,the_ladder),ladder(Location1_47,floor),bananas(Location2_47,ceiling))" -> "[]" ;
	"~can(monkey(Location_37,floor,the_ladder),ladder(Location_37,Any_height_37),bananas(Location_37,ceiling))" -> "~can(monkey(Location1_47,floor,the_ladder),ladder(Location1_47,floor),bananas(Location2_47,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Ordered Resolution\n{ Location_37 <- Location2_2, Any_height_37 <- floor, Bananas_2 <- bananas(Location2_2,ceiling) }",labeldistance="6"];
	"~can(monkey(Location1_29,floor,nothing),ladder(Location1_29,floor),bananas(Location1_29,ceiling))" -> "~can(monkey(Location_37,floor,the_ladder),ladder(Location_37,Any_height_37),bananas(Location_37,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Ordered Resolution\n{ Location1_29 <- Location_5, Height_5 <- floor, Bananas_5 <- bananas(Location_5,ceiling) }",labeldistance="6"];
	"~can(monkey(Somewhere_23,Some_height_23,nothing),Ladder_23,bananas(Somewhere_23,Some_height_23))" -> "~can(monkey(Location1_29,floor,nothing),ladder(Location1_29,floor),bananas(Location1_29,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Ordered Resolution\n{ Somewhere_23 <- Location1_0, Some_height_23 <- ceiling, Ladder_23 <- ladder(Location1_0,floor), Bananas_0 <- bananas(Location1_0,ceiling) }",labeldistance="6"];
	"can(monkey(Location_7,Height_7,the_bananas),Ladder_7,bananas(Location_7,Height_7)) | ~can(monkey(Location_7,Height_7,nothing),Ladder_7,bananas(Location_7,Height_7))" -> "~can(monkey(Somewhere_23,Some_height_23,nothing),Ladder_23,bananas(Somewhere_23,Some_height_23))" [labelfontcolor=black,labelfontsize="12",headlabel="Ordered Resolution\n{ Location_7 <- Somewhere_10, Height_7 <- Some_height_10, Ladder_7 <- Ladder_10, What_10 <- bananas(Somewhere_10,Some_height_10) }",labeldistance="6"];
	"~can(monkey(Somewhere_10,Some_height_10,the_bananas),Ladder_10,What_10)" -> "~can(monkey(Somewhere_23,Some_height_23,nothing),Ladder_23,bananas(Somewhere_23,Some_height_23))" ;
	"can(monkey(Location1_0,ceiling,nothing),ladder(Location1_0,floor),Bananas_0) | ~can(monkey(Location1_0,floor,nothing),ladder(Location1_0,floor),Bananas_0)" -> "~can(monkey(Location1_29,floor,nothing),ladder(Location1_29,floor),bananas(Location1_29,ceiling))" ;
	"can(monkey(Location_5,Height_5,nothing),ladder(Location_5,floor),Bananas_5) | ~can(monkey(Location_5,Height_5,the_ladder),ladder(Location_5,Any_height_5),Bananas_5)" -> "~can(monkey(Location_37,floor,the_ladder),ladder(Location_37,Any_height_37),bananas(Location_37,ceiling))" ;
	"can(monkey(Location2_2,floor,the_ladder),ladder(Location2_2,floor),Bananas_2) | ~can(monkey(Location1_2,floor,the_ladder),ladder(Location1_2,floor),Bananas_2)" -> "~can(monkey(Location1_47,floor,the_ladder),ladder(Location1_47,floor),bananas(Location2_47,ceiling))" ;
}

