digraph {
	nodesep="1.5"; ranksep=2;
	node [shape=plaintext];
	edge [color=gray];
	"~can(monkey(Location1_58,floor,nothing),ladder(Location2_58,floor),bananas(Location2'_58,ceiling))" -> "[]" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location1_58 <- l0, Location2_58 <- l1, Location2'_58 <- l2 }",labeldistance="6"];
	"~can(monkey(Location_52,floor,nothing),ladder(Location_52,floor),bananas(Location2_52,ceiling))" -> "~can(monkey(Location1_58,floor,nothing),ladder(Location2_58,floor),bananas(Location2'_58,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location_52 <- Location2_4, Ladder_4 <- ladder(Location2_4,floor), Bananas_4 <- bananas(Location2_52,ceiling) }",labeldistance="6"];
	"~can(monkey(Location1_42,floor,the_ladder),ladder(Location1_42,floor),bananas(Location2_42,ceiling))" -> "~can(monkey(Location_52,floor,nothing),ladder(Location_52,floor),bananas(Location2_52,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location1_42 <- Location_8, Height_8 <- floor, Bananas_8 <- bananas(Location2_42,ceiling) }",labeldistance="6"];
	"~can(monkey(Location_28,floor,the_ladder),ladder(Location_28,Any_height_28),bananas(Location_28,ceiling))" -> "~can(monkey(Location1_42,floor,the_ladder),ladder(Location1_42,floor),bananas(Location2_42,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location_28 <- Location2_2, Any_height_28 <- floor, Bananas_2 <- bananas(Location2_2,ceiling) }",labeldistance="6"];
	"~can(monkey(Location1_13,floor,nothing),ladder(Location1_13,floor),bananas(Location1_13,ceiling))" -> "~can(monkey(Location_28,floor,the_ladder),ladder(Location_28,Any_height_28),bananas(Location_28,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location1_13 <- Location_5, Height_5 <- floor, Bananas_5 <- bananas(Location_5,ceiling) }",labeldistance="6"];
	"~can(monkey(Location_12,Height_12,nothing),Ladder_12,bananas(Location_12,Height_12))" -> "~can(monkey(Location1_13,floor,nothing),ladder(Location1_13,floor),bananas(Location1_13,ceiling))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Location_12 <- Location1_0, Height_12 <- ceiling, Ladder_12 <- ladder(Location1_0,floor), Bananas_0 <- bananas(Location1_0,ceiling) }",labeldistance="6"];
	"~can(monkey(Somewhere_10,Some_height_10,the_bananas),Ladder_10,What_10)" -> "~can(monkey(Location_12,Height_12,nothing),Ladder_12,bananas(Location_12,Height_12))" [labelfontcolor=black,labelfontsize="12",headlabel="Binary Resolution\n{ Somewhere_10 <- Location_7, Some_height_10 <- Height_7, Ladder_10 <- Ladder_7, What_10 <- bananas(Location_7,Height_7) }",labeldistance="6"];
	"can(monkey(Location_7,Height_7,the_bananas),Ladder_7,bananas(Location_7,Height_7)) | ~can(monkey(Location_7,Height_7,nothing),Ladder_7,bananas(Location_7,Height_7))" -> "~can(monkey(Location_12,Height_12,nothing),Ladder_12,bananas(Location_12,Height_12))" ;
	"can(monkey(Location1_0,ceiling,nothing),ladder(Location1_0,floor),Bananas_0) | ~can(monkey(Location1_0,floor,nothing),ladder(Location1_0,floor),Bananas_0)" -> "~can(monkey(Location1_13,floor,nothing),ladder(Location1_13,floor),bananas(Location1_13,ceiling))" ;
	"can(monkey(Location_5,Height_5,nothing),ladder(Location_5,floor),Bananas_5) | ~can(monkey(Location_5,Height_5,the_ladder),ladder(Location_5,Any_height_5),Bananas_5)" -> "~can(monkey(Location_28,floor,the_ladder),ladder(Location_28,Any_height_28),bananas(Location_28,ceiling))" ;
	"can(monkey(Location2_2,floor,the_ladder),ladder(Location2_2,floor),Bananas_2) | ~can(monkey(Location1_2,floor,the_ladder),ladder(Location1_2,floor),Bananas_2)" -> "~can(monkey(Location1_42,floor,the_ladder),ladder(Location1_42,floor),bananas(Location2_42,ceiling))" ;
	"can(monkey(Location_8,Height_8,the_ladder),ladder(Location_8,Height_8),Bananas_8) | ~can(monkey(Location_8,Height_8,nothing),ladder(Location_8,Height_8),Bananas_8)" -> "~can(monkey(Location_52,floor,nothing),ladder(Location_52,floor),bananas(Location2_52,ceiling))" ;
	"can(monkey(Location2_4,floor,nothing),Ladder_4,Bananas_4) | ~can(monkey(Location1_4,floor,nothing),Ladder_4,Bananas_4)" -> "~can(monkey(Location1_58,floor,nothing),ladder(Location2_58,floor),bananas(Location2'_58,ceiling))" ;
	"can(monkey(l0,floor,nothing),ladder(l1,floor),bananas(l2,ceiling))" -> "[]" ;
}

